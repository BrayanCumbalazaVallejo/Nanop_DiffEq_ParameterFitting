import streamlit as st
import pandas as pd
import numpy as np
import pickle
import time
import os
from scipy.special import lambertw

# --- DEFINICI√ìN DE LA FUNCI√ìN MODEL_4 Y SUS DEPENDENCIAS ---
l = 0.64
epsilon = 1445 + 35
el = l * epsilon

def model_4(t, c1, k, x1, y1):
    """
    Define el modelo 4 para la predicci√≥n de absorbancia.
    """
    return el * (x1 - y1 * np.real(lambertw(c1 * np.exp(-k * t))))

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
st.set_page_config(
    page_title="Monitoreo de Nanopart√≠culas en Tiempo Real",
    page_icon="üß™",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- T√çTULO Y DESCRIPCI√ìN ---
st.title("üß™ Monitoreo de Formaci√≥n de Nanopart√≠culas en Tiempo Real")
st.markdown("""
Esta aplicaci√≥n simula la formaci√≥n de nanopart√≠culas en tiempo real, bas√°ndose en un modelo matem√°tico
previamente entrenado. La gr√°fica muestra la evoluci√≥n de la absorbancia, un indicador de la concentraci√≥n
de nanopart√≠culas, mientras que la tabla registra los datos a intervalos espec√≠ficos.
""")

# --- CARGAR EL MODELO ---
MODEL_PATH = os.path.join(os.path.dirname(__file__), "files", "models", "model_4.pkl")

@st.cache_resource
def load_model(path):
    """Carga el modelo y sus par√°metros desde un archivo pickle."""
    try:
        with open(path, 'rb') as file:
            model_data = pickle.load(file)
        return model_data['model'], model_data['parameters']
    except FileNotFoundError:
        st.error(f"Error: No se encontr√≥ el archivo del modelo en la ruta: {path}")
        st.stop()
    except Exception as e:
        st.error(f"Ocurri√≥ un error al cargar el modelo: {e}")
        st.stop()

model, params = load_model(MODEL_PATH)

# --- FUNCIONES DE SIMULACI√ìN ---
def model_4_prediction(t_values, c1, k, x1, y1):
    """Predice la absorbancia usando el modelo 4 con los par√°metros dados."""
    return el * (x1 - y1 * np.real(lambertw(c1 * np.exp(-k * t_values))))

def simulate_data_point(current_time_seconds, model_func, model_params, noise_level=0.01):
    """Simula un √∫nico punto de datos con ruido gaussiano."""
    time_min = current_time_seconds / 60.0
    predicted_absorbance = model_func(np.array([time_min]), *model_params)[0]
    noise = np.random.normal(0, noise_level * predicted_absorbance)
    simulated_absorbance = predicted_absorbance + noise
    return time_min, simulated_absorbance

# --- INTERFAZ DE USUARIO Y L√ìGICA DE ESTADO ---
st.sidebar.header("üïπÔ∏è Control de Simulaci√≥n")

# Columnas para los botones para una mejor apariencia
col1, col2 = st.sidebar.columns(2)
with col1:
    start_simulation = st.button("‚ñ∂Ô∏è Iniciar")
with col2:
    stop_simulation = st.button("‚èπÔ∏è Detener")

# Inicializaci√≥n del estado de la sesi√≥n
if 'running' not in st.session_state:
    st.session_state.running = False
if 'data' not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=["Tiempo (min)", "Absorbancia (u.a.)"])
if 'current_time' not in st.session_state:
    st.session_state.current_time = 0
if 'last_table_update' not in st.session_state:
    st.session_state.last_table_update = -5

# L√≥gica de los botones
if start_simulation:
    st.session_state.running = True
    st.session_state.data = pd.DataFrame(columns=["Tiempo (min)", "Absorbancia (u.a.)"])
    st.session_state.current_time = 0
    st.session_state.last_table_update = -5
    st.rerun() # Forzar la actualizaci√≥n para reflejar el estado 'running'

if stop_simulation:
    st.session_state.running = False
    st.sidebar.success("Simulaci√≥n detenida.")
    st.rerun()

# --- VISUALIZACI√ìN DIN√ÅMICA ---
st.header("üìà Gr√°fica de Absorbancia vs. Tiempo")
chart_placeholder = st.empty()

st.header("üìã Registros de Datos")
table_placeholder = st.empty()

# Mostrar estado inicial o final
if not st.session_state.running:
    st.info("Presiona 'Iniciar' para comenzar la simulaci√≥n.")
    # Mostrar datos finales si existen
    if not st.session_state.data.empty:
        final_df = st.session_state.data.set_index("Tiempo (min)")
        chart_placeholder.line_chart(final_df)
        table_placeholder.dataframe(final_df.style.format({"Absorbancia (u.a.)": "{:.4f}"}))

# Bucle principal de simulaci√≥n
if st.session_state.running:
    st.sidebar.info("Simulaci√≥n en curso...")

    max_sim_time_seconds = 180 * 60  # 180 minutos en segundos

    while st.session_state.running and st.session_state.current_time <= max_sim_time_seconds:
        time_min, simulated_absorbance = simulate_data_point(
            st.session_state.current_time, model_4_prediction, params
        )

        new_row = pd.DataFrame([{
            "Tiempo (min)": time_min,
            "Absorbancia (u.a.)": simulated_absorbance
        }])
        st.session_state.data = pd.concat([st.session_state.data, new_row], ignore_index=True)

        # --- Actualizaci√≥n de la UI ---
        # El gr√°fico se actualiza en cada paso para una visualizaci√≥n fluida
        chart_placeholder.line_chart(st.session_state.data.set_index("Tiempo (min)"))

        # La tabla se actualiza cada 5 segundos
        if (st.session_state.current_time - st.session_state.last_table_update) >= 5:
            # Mostramos los √∫ltimos 10 registros
            table_placeholder.dataframe(
                st.session_state.data.tail(10).set_index("Tiempo (min)").style.format({"Absorbancia (u.a.)": "{:.4f}"})
            )
            st.session_state.last_table_update = st.session_state.current_time

        st.session_state.current_time += 1
        time.sleep(0.05) # Pausa para una simulaci√≥n m√°s fluida

    if st.session_state.current_time > max_sim_time_seconds:
        st.session_state.running = False
        st.sidebar.success("Simulaci√≥n completada.")
        st.rerun()