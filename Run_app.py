import streamlit as st
import pandas as pd
import numpy as np
import pickle
import time
import os
from scipy.special import lambertw

# --- DEFINICI√ìN DE LA FUNCI√ìN Y CONSTANTES DEL MODELO ---
l = 0.64
epsilon = 1445 + 35
el = l * epsilon

def model_4(t, c1, k, x1, y1):
    return el * (x1 - y1 * np.real(lambertw(c1 * np.exp(-k * t))))

# --- CONFIGURACI√ìN DE LA P√ÅGINA DE STREAMLIT ---
st.set_page_config(
    page_title="Prueba Acelerada - Monitoreo de Nanopart√≠culas",
    page_icon="‚è±Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- T√çTULO Y DESCRIPCI√ìN ---
st.title("‚è±Ô∏è Prueba Acelerada: Monitoreo de Nanopart√≠culas")
st.markdown("Esta aplicaci√≥n simula la formaci√≥n de nanopart√≠culas de forma acelerada. **Cada segundo real equivale a 1 minuto en la simulaci√≥n**.")

# --- CARGA DEL MODELO (CACHEADO) ---
MODEL_PATH = os.path.join(os.path.dirname(__file__), "files", "models", "model_4.pkl")

@st.cache_resource
def load_model(path):
    try:
        with open(path, 'rb') as file:
            model_data = pickle.load(file)
        return model_data['model'], model_data['parameters']
    except FileNotFoundError:
        st.error(f"Error Cr√≠tico: No se encontr√≥ el archivo del modelo en '{path}'. Aseg√∫rate de que el archivo existe.")
        st.stop()
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        st.stop()

model, params = load_model(MODEL_PATH)

# --- FUNCIONES DE SIMULACI√ìN ---
def model_4_prediction(t_values, c1, k, x1, y1):
    return el * (x1 - y1 * np.real(lambertw(c1 * np.exp(-k * t_values))))

def simulate_data_point(current_sim_time_seconds, model_func, model_params, noise_level=0.005):
    time_min = current_sim_time_seconds / 60.0
    predicted_absorbance = model_func(np.array([time_min]), *model_params)[0]
    noise = np.random.normal(0, noise_level * predicted_absorbance)
    return time_min, predicted_absorbance + noise

# --- ESTADO DE LA SESI√ìN ---
if 'running' not in st.session_state:
    st.session_state.running = False
if 'data' not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=["Tiempo (min)", "Absorbancia (u.a.)"])
if 'sim_time' not in st.session_state:
    st.session_state.sim_time = 0
if 'last_update' not in st.session_state:
    st.session_state.last_update = 0

# --- CONTROLES DE LA BARRA LATERAL ---
st.sidebar.header("üïπÔ∏è Control de Simulaci√≥n")
if st.sidebar.button("‚ñ∂Ô∏è Iniciar Simulaci√≥n Acelerada", type="primary"):
    st.session_state.running = True
    st.session_state.data = pd.DataFrame(columns=["Tiempo (min)", "Absorbancia (u.a.)"])
    st.session_state.sim_time = 0
    st.session_state.last_update = time.time()
    st.rerun()

if st.sidebar.button("‚èπÔ∏è Detener Simulaci√≥n"):
    st.session_state.running = False
    st.sidebar.success("Simulaci√≥n detenida.")
    st.rerun()

# --- LAYOUT DE LA APLICACI√ìN ---
col1, col2 = st.columns([2, 1])
with col1:
    st.subheader("üìà Gr√°fica en Tiempo Real")
    chart_placeholder = st.empty()
with col2:
    st.subheader("üìã Tabla de Registros")
    table_placeholder = st.empty()

# --- L√ìGICA DE SIMULACI√ìN Y ACTUALIZACI√ìN ---
Y_AXIS_RANGE = [0.0, 2.0]

# --- L√≥gica para cuando la simulaci√≥n NO est√° corriendo ---
if not st.session_state.running:
    st.info("Presiona 'Iniciar Simulaci√≥n Acelerada' para comenzar.")
    if not st.session_state.data.empty:
        df_display = st.session_state.data.set_index("Tiempo (min)")
        chart_placeholder.line_chart(df_display, color="#ffca3a", y=Y_AXIS_RANGE, use_container_width=True)
        table_placeholder.dataframe(df_display.style.format("{:.4f}"), use_container_width=True)

# --- L√≥gica para cuando la simulaci√≥n S√ç est√° corriendo ---
if st.session_state.running:
    st.sidebar.info("Simulaci√≥n en curso...")
    
    # <-- LA CORRECCI√ìN CLAVE EST√Å AQU√ç
    # Solo intentamos mostrar la gr√°fica y la tabla si el DataFrame ya tiene datos.
    if not st.session_state.data.empty:
        df_display = st.session_state.data.set_index("Tiempo (min)")
        chart_placeholder.line_chart(df_display, color="#ffca3a", y=Y_AXIS_RANGE, use_container_width=True)
        table_placeholder.dataframe(df_display.style.format({"Absorbancia (u.a.)": "{:.4f}"}), use_container_width=True)

    max_sim_time_minutes = 180
    max_sim_time_seconds = max_sim_time_minutes * 60

    # L√≥gica del temporizador para a√±adir nuevos datos
    if time.time() - st.session_state.last_update > 1:
        if st.session_state.sim_time <= max_sim_time_seconds:
            time_min, new_abs = simulate_data_point(st.session_state.sim_time, model_4_prediction, params)
            new_row = pd.DataFrame([{"Tiempo (min)": time_min, "Absorbancia (u.a.)": new_abs}])
            st.session_state.data = pd.concat([st.session_state.data, new_row], ignore_index=True)
            
            st.session_state.sim_time += 60
            st.session_state.last_update = time.time()
        else:
            st.session_state.running = False
            st.sidebar.success("Simulaci√≥n completada.")
    
    # Si la simulaci√≥n debe continuar, forzamos un 'rerun' para mantener el ciclo vivo
    if st.session_state.running:
        time.sleep(0.2)
        st.rerun()